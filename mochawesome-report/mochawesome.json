{
  "stats": {
    "suites": 1,
    "tests": 5,
    "passes": 5,
    "pending": 0,
    "failures": 0,
    "start": "2025-07-17T23:36:36.459Z",
    "end": "2025-07-17T23:36:40.846Z",
    "duration": 4387,
    "testsRegistered": 5,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "3f352bf7-e219-4585-bea9-a1335cc41614",
      "title": "",
      "fullFile": "C:\\Users\\Salsabila\\VSCode\\gorest\\test\\crudUser.js",
      "file": "\\test\\crudUser.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "c47b4baa-5362-4f7c-855a-46e000c98cac",
          "title": "User API Tests (GoREST)",
          "fullFile": "C:\\Users\\Salsabila\\VSCode\\gorest\\test\\crudUser.js",
          "file": "\\test\\crudUser.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return 201 for valid new user",
              "fullTitle": "User API Tests (GoREST) should return 201 for valid new user",
              "timedOut": false,
              "duration": 1214,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newUser = {\n  name: \"Salsabila\",\n  email: `salsabila.${Date.now()}@example.com`,\n  gender: \"female\",\n  status: \"active\"\n};\nconst response = await request(baseUrl)\n  .post('/users')\n  .set('Authorization', authToken)\n  .send(newUser);\nconsole.log('CREATE RESPONSE:', response.body);\nexpect(response.status).to.equal(201);\nexpect(response.body).to.have.property(\"id\");\nuserId = response.body.id;",
              "err": {},
              "uuid": "04a2d68d-0508-4379-9482-d4070045b98d",
              "parentUUID": "c47b4baa-5362-4f7c-855a-46e000c98cac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 422 when creating user without email",
              "fullTitle": "User API Tests (GoREST) should return 422 when creating user without email",
              "timedOut": false,
              "duration": 496,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newUser = {\n  name: \"Invalid User\",\n  gender: \"male\",\n  status: \"active\"\n};\nconst response = await request(baseUrl)\n  .post('/users')\n  .set('Authorization', authToken)\n  .send(newUser);\nconsole.log('CREATE NEGATIVE RESPONSE:', response.body);\nexpect(response.status).to.equal(422);\nexpect(response.body[0]).to.have.property(\"field\", \"email\");",
              "err": {},
              "uuid": "178b70d6-eb5e-43e3-90b8-fa518e8ce846",
              "parentUUID": "c47b4baa-5362-4f7c-855a-46e000c98cac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 200 on get created user details",
              "fullTitle": "User API Tests (GoREST) should return 200 on get created user details",
              "timedOut": false,
              "duration": 1031,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request(baseUrl)\n  .get(`/users/${userId}`)\n  .set('Authorization', authToken);\nconsole.log('GET RESPONSE:', response.body);\nexpect(response.status).to.equal(200);\nexpect(response.body).to.have.property(\"id\", userId);",
              "err": {},
              "uuid": "ccf68d34-50cd-4530-949c-4b6de52ef0c3",
              "parentUUID": "c47b4baa-5362-4f7c-855a-46e000c98cac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 200 on update user",
              "fullTitle": "User API Tests (GoREST) should return 200 on update user",
              "timedOut": false,
              "duration": 1027,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedData = {\n  name: \"Salsabila Updated\",\n  status: \"inactive\"\n};\nconst response = await request(baseUrl)\n  .put(`/users/${userId}`)\n  .set('Authorization', authToken)\n  .send(updatedData);\nconsole.log('UPDATE RESPONSE:', response.body);\nexpect(response.status).to.equal(200);\nexpect(response.body).to.have.property(\"name\", \"Salsabila Updated\");",
              "err": {},
              "uuid": "85674661-f136-4bff-861c-71474b8ecffb",
              "parentUUID": "c47b4baa-5362-4f7c-855a-46e000c98cac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 204 on delete user",
              "fullTitle": "User API Tests (GoREST) should return 204 on delete user",
              "timedOut": false,
              "duration": 602,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request(baseUrl)\n  .delete(`/users/${userId}`)\n  .set('Authorization', authToken);\nconsole.log('DELETE RESPONSE:', response.status);\nexpect(response.status).to.equal(204);",
              "err": {},
              "uuid": "dc08729c-1c86-4a5e-abbd-20e8f3616782",
              "parentUUID": "c47b4baa-5362-4f7c-855a-46e000c98cac",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "04a2d68d-0508-4379-9482-d4070045b98d",
            "178b70d6-eb5e-43e3-90b8-fa518e8ce846",
            "ccf68d34-50cd-4530-949c-4b6de52ef0c3",
            "85674661-f136-4bff-861c-71474b8ecffb",
            "dc08729c-1c86-4a5e-abbd-20e8f3616782"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4370,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}